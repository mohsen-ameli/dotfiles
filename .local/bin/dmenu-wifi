#!/bin/sh
##########################
## Shows dmenu with avialable wifi networks to connect to.
##########################

schema="rofi -dmenu -no-show-icons -i -p Search:"

notify() {
	notify-send "WiFi" "$@" -i "$HOME/.local/share/icons/custom/wifi-icon.png" -t 5000 -r 410
}

notify "Launching..."

interface=$(nmcli device | tail -n+2 | cut -f1 -d" " | $schema)
if [ "$interface" = "" ]; then
  exit
fi

# when connecting to completely new networks, in different areas, this is needed. Need more testing but this SHOULD work
nmcli device disconnect $interface
nmcli r wifi on

notify "Scanning for networks on $interface"

# Generating the list of wifis to show. Very hacky way to do it,
ssids=$(nmcli -f SSID dev wifi | tail -n+2 | sort -u | grep -v "\--" > /tmp/dmenu-network)
full=$(nmcli -f SSID,SIGNAL,FREQ,SECURITY dev wifi | tail -n+2)
prompt=""

while read line; do
  speed=$(echo "$full" | grep "$line" | awk '{if (NR==1) {if ($1 >= 80) {print "󰤨"} else if ($1 >= 50) {print "󰤢"} else if ($1 >= 25) {print "󰤟"} else {print "󰤯"}}}')
  # frequency=$(echo "$full" | grep "$line" | awk '!/--/ {if (NR==1) {$1 = $1/1000; if ($1 < 3) {printf 2.4} else if ($1 < 5.5) {printf 5} else {printf 6}; print " GHz" }}')
  security=$(echo "$full" | grep "$line" | awk '{if (NR==1) {if(index($5, WPA)) {print ""} else {print ""}}}')
  prompt="${prompt}$security $speed  $line\n"
done < /tmp/dmenu-network

# removing the last \n
prompt=${prompt::-2}

status=$(nmcli device status)
connection=$(echo "$status" | awk "/^$interface/ {print \$3}")
current=$(echo "$status" | awk 'NR==2 {print $4}')

# Adding a couple options to rofi
prompt="NMTUI\n$prompt"
if [ $connection != "disconnected" ]; then
	prompt="Disconnect WiFi\n$prompt"
fi

# Showing the menu and grabbing the ssid
choice=$(printf "%b\n" "$prompt" | $schema)
ssid=$(echo ${choice#*  })

# Handling disconnect and nmtui launch
if [ "$choice" = "" ]; then
	exit 0
elif [ "$choice" = "Disconnect WiFi" ]; then
	nmcli dev disconnect $interface
	notify "Disconnected from WiFi."
	exit 0
elif [ "$choice" = "NMTUI" ]; then
	st -class floating -e nmtui
	exit 0
fi

# Handling if we're already connected 
if [ "$ssid" = "$current" ]; then
	notify "Already connected!"
	exit 0
fi

notify "Trying to connect to $ssid"
nmcli dev wifi connect "$ssid"

if [ $? -eq 0 ]; then
	notify "Successfully connected to $ssid"
	exit 0
# If nm-applet is NOT running, then we ask the user for the password
# We do this since if nm-applet is running, it'll ask for the password automatically.
elif [ $(pgrep nm-applet | wc -l) -eq 0 ]; then
	# Getting the password of the wifi
	pass=$(zenity --password 2> /dev/null)

	notify "Attempting to connect with the given password"

	nmcli dev wifi connect "$ssid" password "$pass"

	if [ $? -eq 0 ]; then
		notify "Successfully connected to $ssid"
	else
		notify "Could not connect to $ssid.\nWrong password was given most likely."
	fi
fi
