#!/bin/sh
##########################
## Shows a dmenu page with avialable wifi networks to connect to.
## This script also handles the connecting part too.
##########################

schema="rofi -dmenu -no-show-icons -i -p Search:"
interface="wlan0"

# $1 is the message to be shown
notify() {
	notify-send "WiFi" "$@" -i "$HOME/.local/share/icons/custom/wifi-icon.png" -t 3000
}

notify "Launching..."

# Generating the list of wifis to show. Very hacky way to do it,
# since we are cutting the SSID's to max 20 characters.
signals=$(nmcli -f SIGNAL dev wifi | awk '!/--/ {if (NR>1) {if ($0 >= 80) {print "󰤨"} else if ($0 >= 50) {print "󰤢"} else if ($0 >= 25) {print "󰤟"} else {print "󰤯"}}}')
ssids=$(nmcli -f SSID dev wifi | awk '!/--/ {if (NR>1) {print $0}}')
# substr($0,0,20) to cut the ssid
freqs=$(nmcli -f FREQ dev wifi | awk '!/--/ {if (NR>1) {$1 = $1/1000; if ($1 < 3) {printf 2.4} else if ($1 < 5.5) {printf 5} else {printf 6}; print " GHz" }}')
num_lines=$(echo "$ssids" | wc -l)
prompt=""
i=1
while [ $i -le $num_lines ]; do
    line0=$(echo "$signals" | sed -n "${i}p")
    line1=$(echo "$ssids" | sed -n "${i}p")
    line2=$(echo "$freqs" | sed -n "${i}p")
    prompt="${prompt}$line0  $line1\t$line2\n"
    i=$((i + 1))
done

status=$(nmcli device status)
connection=$(echo "$status" | awk "/^$interface/ {print \$3}")
current=$(echo "$status" | awk 'NR==2 {print $4}')

# Adding a couple options to rofi
prompt="NMTUI\n$prompt"
if [ $connection != "disconnected" ]; then
	prompt="Disconnect WiFi\n$prompt"
fi

# Showing the menu and grabbing the ssid
choice=$(printf "%b\n" "$prompt" | $schema)
ssid_first_word=$(echo "$choice" | awk '{print $2}')
ssid=$(echo "$ssids" | grep "$ssid_first_word" | head -n1 | xargs)

# Handling disconnect and nmtui launch
if [ "$choice" = "" ]; then
	exit 0
elif [ "$choice" = "Disconnect WiFi" ]; then
	nmcli dev disconnect $interface
	notify "Disconnected from WiFi."
	exit 0
elif [ "$choice" = "NMTUI" ]; then
	alacritty --class floating -e nmtui
	exit 0
fi

# Handling if we're already connected 
if [ "$ssid" = "$current" ]; then
	notify "Already connected!"
	exit 0
fi

notify "Trying to connect to $ssid"
nmcli dev wifi connect "$ssid"

if [ $? -eq 0 ]; then
	notify "Successfully connected to $ssid"
	exit 0
# If nm-applet is NOT running, then we ask the user for the password
# We do this since if nm-applet is running, it'll ask for the pass automatically.
elif [ $(pgrep nm-applet | wc -l) -eq 0 ]; then
	# Getting the password of the wifi
	pass=$(zenity --password 2> /dev/null)

	notify "Attempting to connect with the given password"

	nmcli dev wifi connect "$ssid" password "$pass"

	if [ $? -eq 0 ]; then
		notify "Successfully connected to $ssid"
	else
		notify "Could not connect to $ssid.\nWrong password was given most likely."
	fi
fi

