#!/bin/sh
##########################
## Shows dmenu with avialable wifi networks to connect to.
## This script also works with multiple wireless cards.
## Requires: nmcli, rofi or dmenu, zenity
##########################

schema="rofi -dmenu -no-show-icons -i"

notify() {
	notify-send "WiFi" "$@" -i "$HOME/.local/share/icons/custom/wifi-icon.png" -t 5000 -r 410
}

notify "Launching..."

interfaces=$(nmcli --get-values GENERAL.DEVICE,GENERAL.TYPE device show | sed '/^wifi$/!{h;d;};x')
interface=$(echo "$interfaces" | $schema -p "Interface Name:")
if [ "$interface" = "" ]; then
  exit
fi

# when connecting to completely new networks, in different areas, this is needed. Need more testing but this SHOULD work
for ifname in $interfaces; do
  nmcli device disconnect "$ifname"
done
nmcli r wifi on

rescan=1
while [ $rescan -eq 1 ]; do
  notify "Scanning for networks on $interface"

  # Generating the list of wifis to show. Very hacky way to do it,
  ssids=$(nmcli -f SSID d wifi list --rescan yes ifname "$interface" | sort -u | grep -v "\--" | grep -v "^SSID" | tail -n+2 > /tmp/dmenu-network)
  full=$(nmcli -f SSID,SIGNAL,FREQ,SECURITY dev wifi list ifname "$interface" | tail -n+2)
  prompt=""

  while read line; do
    speed=$(echo "$full" | grep "$line" | awk '{if (NR==1) {if ($1 >= 80) {print "󰤨"} else if ($1 >= 50) {print "󰤢"} else if ($1 >= 25) {print "󰤟"} else {print "󰤯"}}}')
    # frequency=$(echo "$full" | grep "$line" | awk '!/--/ {if (NR==1) {$1 = $1/1000; if ($1 < 3) {printf 2.4} else if ($1 < 5.5) {printf 5} else {printf 6}; print " GHz" }}')
    security=$(echo "$full" | grep "$line" | awk '{if (NR==1) {if(index($5, WPA)) {print ""} else {print ""}}}')
    prompt="${prompt}$security $speed  $line\n"
  done < /tmp/dmenu-network

  # removing the last \n
  prompt=${prompt::-2}

  connection=$(nmcli -f state device status | awk 'NR==2 {print $0}')
  current=$(nmcli -f connection device status | awk 'NR==2 {print $0}')

  # Adding a couple options to rofi
  prompt="Rescan\nNMTUI\n$prompt"
  if [ "$connection" != "disconnected" ]; then
    prompt="Disconnect WiFi\n$prompt"
  fi

  # Showing the menu and grabbing the ssid
  choice=$(printf "%b\n" "$prompt" | $schema -p "Choose a Network:")
  if [ "$choice" != "Rescan" ]; then
    rescan=0
  fi
done

ssid=$(echo ${choice#*  })

# Handling disconnect and nmtui launch
if [ "$choice" = "" ]; then
  nmcli device connect "$interface"
	exit 0
elif [ "$choice" = "Disconnect WiFi" ]; then
	nmcli dev disconnect "$interface"
	notify "Disconnected from WiFi."
	exit 0
elif [ "$choice" = "NMTUI" ]; then
	alacritty --class floating -e nmtui
	exit 0
fi

# Handling if we're already connected 
if [ "$ssid" = "$current" ]; then
	notify "Already connected!"
	exit 0
fi

notify "Trying to connect to $ssid"
nmcli dev wifi connect "$ssid" ifname "$interface"

if [ $? -eq 0 ]; then
	notify "Successfully connected to $ssid"
	exit 0
# If nm-applet is NOT running, then we ask the user for the password
# We do this since if nm-applet is running, it'll ask for the password automatically.
elif [ $(pgrep nm-applet | wc -l) -eq 0 ]; then
	# Getting the password of the wifi
	zen=$(zenity --password --username 2> /dev/null)
  username=$(echo "${zen%|*}")
  password=$(echo "${zen##*|}")
	notify "Attempting to connect with the given password"
  # nmcli connection add type wifi con-name "connection" ifname "$interface" ssid "$ssid"
  # nmcli connection modify "$ssid" 802-1x.identity "$username"
  # nmcli connection modify "$ssid" 802-1x.password "$password"
	nmcli dev wifi connect "$ssid" password "$password" ifname "$interface"

	if [ $? -eq 0 ]; then
		notify "Successfully connected to $ssid"
	else
		notify "Could not connect to $ssid.\nWrong password was given most likely."
	fi
fi
