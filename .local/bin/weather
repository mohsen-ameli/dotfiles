#!/usr/bin/env python3
##########################
## Shows the current weather using the open-meteo.in api. This took some time, enjoy :)
## Requires: requests, python-beautifulsoup4, python-tabulate, python-wcwidth
##########################

import json
import requests
import bs4
import sys
import time
from datetime import datetime
import tabulate
tabulate.PRESERVE_WHITESPACE = True

HOURS_COUNT = 24  # how many hours ahead to show
UPDATE_INTERVAL = 1800

# https://www.nodc.noaa.gov/archive/arc0021/0002199/1.1/data/0-data/HTML/WMO-CODE/WMO4677.HTM
# These icons are based on wmo-code which is what open-meteo uses
icons = {
    "overcast": {"name": "Cloudy", "icon": "󰖐 ", "emoji": "☁️"},
    "partly-cloudy-day": {"name": "Mostly Cloudy", "icon": " ", "emoji": "🌤️"},
    "partly-cloudy-night": {"name": "Mostly Cloudy", "icon": " ", "emoji": " "},
    "haze": {"name": "Haze", "icon": " ", "emoji": " "},
    "wind": {"name": "Windy", "icon": "󰖝 ", "emoji": "💨"},
    "fog": {"name": "Fog", "icon": " ", "emoji": "🌫️"},
    "sandstorm": {"name": "Sandstorm", "icon": " ", "emoji": "🌪️"},
    "clear-day": {"name": "Sunny", "icon": " ", "emoji": "☀️"},
    "clear-night": {"name": "Clear", "icon": " ", "emoji": "🌙"},
    "thunderstorm": {"name": "Thunderstorm", "icon": " ", "emoji": "⛈️"},
    "hail": {"name": "Hail", "icon": "󰖒 ", "emoji": "󰖒"},
    "rain-shower": {"name": "Shower", "icon": " ", "emoji": "☔"},
    "rain": {"name": "Rain", "icon": " ", "emoji": "🌧️"},
    "snow-light": {"name": "Light Snow", "icon": " ", "emoji": "🌨️"},
    "snow": {"name": "Snow", "icon": " ", "emoji": "❄️"},
}

if "--help" in sys.argv:
    print("""Usage: weather [OPTIONS] [ARGUMENTS]

If no options or arguments are passed, weather will try to use cached data
We save the time of the last request and if it is within an hour, we use that data

OPTIONS:
    --live: Get the live weather data
    --url: Get the url of the weather data

ARGUMENTS:
    --icon: Show the weather icon
    --emoji: Show the weather emoji
    --tooltip: Show the weather tooltip""")
    exit(0)

if "--live" not in sys.argv and "--url" not in sys.argv:
    try:
        f = open("/tmp/weather.txt", "r")
        data = f.read()
        f.close()
        j = json.loads(data)
        if time.time() - float(j["time"]) <= UPDATE_INTERVAL:
            if "--emoji" in sys.argv:
                print(j["text_emoji"])
            elif "--icon" in sys.argv:
                print(j["text_icon"])
            elif "--tooltip" in sys.argv:
                print(j["tooltip"])
            else:
                print(data)
            exit(0)
    except FileNotFoundError:
        pass


def get_metadata():
    r = requests.get("https://whatismycountry.com/")
    soup = bs4.BeautifulSoup(r.text, features="lxml")
    i = 0
    for div in soup.find_all("div", class_="card"):
        i += 1
        if i == 4:
            city = div.h4.text
            city = "".join(city.split("(")[:-1]).strip()
        if i == 6:
            lat_log = div.h4.text.split(",")
            latitude = lat_log[0].strip()[:-1]
            longitude = lat_log[1].strip()[:-1]
        if i == 7:
            timezone = div.h4.text

    curr_time = int(datetime.now().strftime("%H"))
    url = f"https://api.open-meteo.com/v1/forecast?latitude={latitude}&longitude={longitude}&current=temperature_2m,is_day,precipitation,weather_code,wind_speed_10m&hourly=temperature_2m,weather_code,wind_speed_10m,is_day&daily=sunrise,sunset&timezone={timezone}&forecast_days=3"
    #      could use gem or forecast here ^^^^^^^^
    return city, curr_time, url


def get_icon(code: int, is_day: int) -> str:
    if code <= 2:
        return "clear-day" if is_day == 1 else "clear-night"
    elif code == 3:
        return "partly-cloudy-day" if is_day == 1 else "partly-cloudy-night"
    elif code == 4:
        return "cloudy"
    elif code <= 9:
        return "haze"
    elif code <= 19:
        return "fog"
    elif code <= 21:
        return "rain"
    elif code == 22:
        return "snow"
    elif code <= 28:
        return "hail"
    elif code == 29:
        return "thunderstorm"
    elif code <= 35:
        return "sandstorm"
    elif code <= 37:
        return "snow-light"
    elif code <= 39:
        return "snow"
    elif code <= 49:
        return "fog"
    elif code <= 59:
        return "rain-shower"
    elif code <= 69:
        return "rain"
    elif code <= 79:
        return "snow-light"
    elif code <= 92:
        return "rain"
    elif code <= 94:
        return "snow"
    else:
        return "thunderstorm"


def get_am_pm(time: int):
    if time == curr_time:
        return "now"
    elif time == 0:
        return "12AM"
    elif time <= 12:
        return f"{time}AM"
    else:
        return f"{time-12}PM"


def get_data():
    try:
        with open("/tmp/toronto.json") as f_in:
            weather = json.load(f_in)
    except Exception as e:
        weather = requests.get(url).json()
    return weather

def format_data(weather: dict):
    wind_unit = weather["current_units"]["wind_speed_10m"]
    high = round(max(weather["hourly"]["temperature_2m"][:24]))
    low = round(min(weather["hourly"]["temperature_2m"][:24]))
    wind = weather["hourly"]["wind_speed_10m"]
    sunrise = weather["daily"]["sunrise"][0].split("T")[1]
    sunset = weather["daily"]["sunset"][0].split("T")[1]
    precipitation = weather["current"]["precipitation"]
    temperature = str(round(weather['current']['temperature_2m'])) + "°"
    wind_speed = weather["current"]["wind_speed_10m"]
    if int(wind_speed) > 20:
        condition = "wind"
    else:
        condition = get_icon(weather["current"]["weather_code"], weather["current"]["is_day"])
    condition_name = icons[condition]["name"]
    icon = icons[condition]["icon"]
    emoji = icons[condition]["emoji"]

    data = {
        "time": f"{time.time()}",
        "text_icon": f"{icon} {temperature}",
        "text_emoji": f"{emoji} {temperature}",
    }

    table, hours, conditions, temps = [], [], [], []
    table.append(["-"*4] * 6)
    i = 0 # counter for each hour
    j = 0 # counter for each row
    for t in range(curr_time, curr_time + HOURS_COUNT):
        hours.append(get_am_pm(t%24))
        condition = get_icon(weather["hourly"]["weather_code"][t], weather["hourly"]["is_day"][t])
        conditions.append(icons[condition]['emoji'])
        temps.append(f"{round(weather['hourly']['temperature_2m'][t])}°")
        i += 1
        if i % 6 == 0:
            j += 1
            table.append(hours)
            table.append(conditions)
            table.append(temps)
            if j <= 3:
                table.append([" "*4] * 6) # adding a blank row for spacing
            hours, conditions, temps = [], [], []

    header = [
        [f"{" "*10}{city}"],
        [f"{" "*10}{temperature}"],
        [f"{" "*10}{condition_name} {icon}"],
        [f"{" "*10}H: {high}° L: {low}°"]
    ]

    data["tooltip"] = f"""<tt>
{tabulate.tabulate(header, stralign="center", tablefmt="plain")}
{tabulate.tabulate(table, tablefmt="plain", maxcolwidths=[4, 4, 4, 4, 4, 4])}

Sunrise: {sunrise}
Sunset: {sunset}
Wind Speed: {wind_speed} {wind_unit}
Chance of Precipitation: {precipitation:.0f}%
</tt>"""

    return data

city, curr_time, url = get_metadata()

if len(sys.argv) > 1 and sys.argv[1] == "--url":
    print(url)
    exit(0)

weather = get_data()    
data = format_data(weather)
j = json.dumps(data)
f = open("/tmp/weather.txt", "w")
f.write(j)
f.close()

if len(sys.argv) <= 1:
    print(j)
elif "--emoji" in sys.argv:
    print(data["text_emoji"])
elif "--icon" in sys.argv:
    print(data["text_icon"])
elif "--tooltip" in sys.argv: 
    print(data["tooltip"])
elif "--live" in sys.argv:
    print(j)

