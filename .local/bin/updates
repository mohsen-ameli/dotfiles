#!/usr/bin/env python3
##########################
## Gets AUR and arch updates and puts them in the tooltip.
## Inspried by Stephan Raabe
##########################

import subprocess
import json
import sys
import time
from tabulate import tabulate

try:
    f = open("/tmp/updates.txt", "r")
    data = f.read()
    f.close()
    j = json.loads(data)
    if time.time() - float(j["time"]) <= 3600:
        print(data)
        exit(0)
except FileNotFoundError:
    pass

aur_updates = 0
arch_updates = 0
updates = 0
threshhold_green=0
threshhold_yellow=25
threshhold_red=100
rows = []

if len(sys.argv) > 1 and sys.argv[1] in ["-h", "--help", "-H", "help"]:
    print("Usage: aur_updates.py [--updates]")
    exit(0)

p = subprocess.Popen("$HOME/.local/bin/is-wayland", shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
line = p.stdout.readlines()[0]
is_wayland = line.decode("UTF-8").split("\n")[0]

p = subprocess.Popen('yay -Qua -i 2> /dev/null', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
lines = p.stdout.readlines()
aur_updates = len(lines)
for i in range(0, len(lines)):
    name, curr_v, _, update_v = str(lines[i].decode("UTF-8")).strip().split(" ")
    rows.append([f"{name} (AUR)", update_v])
retval = p.wait()

p = subprocess.Popen('checkupdates 2> /dev/null', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
lines = []
ll = p.stdout.readlines()
arch_updates = len(ll)

# ignoreing lib and qt updates
for line in ll:
    name = str(line.decode("UTF-8")).strip().split(" ")[0]
    if "lib" not in name and "qt" not in name:
        lines.append(line)

for i in range(0, len(lines)):
    name, curr_v, _, update_v = str(lines[i].decode("UTF-8")).strip().split(" ")
    rows.append([name, update_v[:12]])
retval = p.wait()

# tooltip = f"{'\t'*27}\n"
tooltip = "<tt>"
tooltip += tabulate(rows, ['Name', 'New Version', 'Name', 'New Version'], tablefmt='rounded_outline')
tooltip += "</tt>"

updates = aur_updates + arch_updates

if len(sys.argv) > 1 and sys.argv[1] == "--updates":
    print(updates)
    exit(0)

if is_wayland == "0":
    print(updates)
    exit(0)

# css_class = "green"
# if updates > threshhold_yellow:
#     css_class = "yellow"
# if updates > threshhold_red:
#     css_class = "red"

if updates > threshhold_green:
    if len(sys.argv) > 1 and sys.argv[1] == "--updates":
        print(updates)
        exit(0)
    
    data = {
        "time": f"{int(time.time())}",
        "text": f"{updates} Updates ï€¡ ",
        "number": f"{updates}",
        "tooltip": f"{tooltip}"
    }
    j = json.dumps(data)
    print(j)

    f = open("/tmp/updates.txt", "w")
    f.write(j)
    f.close()
else:
    print(json.dumps({
        "text": "0",
        "alt": "0",
        "tooltip": "0 Updates... Yay"
    }))
