#!/usr/bin/env python3
##########################
## Gets AUR and arch updates and puts them in the tooltip.
## Inspried by Stephan Raabe
##########################

import subprocess
import json
import sys
import time
from tabulate import tabulate

pkg_manager="paru"

def print_usage():
    print("Usage: updates [--help | --live | --count]")
    exit(0)

if len(sys.argv) > 1 and sys.argv[1] in ["--help", "-h", "-H", "help"]:
    print_usage()
elif len(sys.argv) == 1:
    try:
        f = open("/tmp/updates.txt", "r")
        data = f.read()
        f.close()
        j = json.loads(data)
        if time.time() - float(j["time"]) <= 3600:
            print(data)
            exit(0)
    except FileNotFoundError:
        pass
elif len(sys.argv) <= 1 and sys.argv[1] != "--live":
    print_usage()

aur_updates = 0
arch_updates = 0
updates = 0
threshhold_green=0
threshhold_yellow=25
threshhold_red=100
rows = []

# Check if we are on wayland
p = subprocess.Popen("$HOME/.local/bin/is-wayland", shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
line = p.stdout.readlines()[0]
is_wayland = line.decode("UTF-8").split("\n")[0]

# Getting AUR updates
p = subprocess.Popen(f'{pkg_manager} -Qua -i 2> /dev/null', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
lines = p.stdout.readlines()
aur_updates = len(lines)
for i in range(0, len(lines)):
    name, curr_v, _, update_v = str(lines[i].decode("UTF-8")).strip().split(" ")
    rows.append([f"{name} (AUR)", update_v])
retval = p.wait()

# Getting pacman updates
p = subprocess.Popen('checkupdates 2> /dev/null', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
lines = []
ll = p.stdout.readlines()
arch_updates = len(ll)

updates = aur_updates + arch_updates

if (len(sys.argv) > 1 and sys.argv[1] == "--count") or is_wayland == "0":
    print(updates)
    exit(0)
if updates == 0:
    tooltip = "0 Updates... Yay!"
else:
    # Not showing lib and qt updates in tooltip
    for line in ll:
        name = str(line.decode("UTF-8")).strip().split(" ")[0]
        if "lib" not in name and "qt" not in name:
            lines.append(line)

    for i in range(0, len(lines)):
        name, curr_v, _, update_v = str(lines[i].decode("UTF-8")).strip().split(" ")
        rows.append([name, update_v[:12]])
    retval = p.wait()

    tooltip = "<tt>"
    tooltip += tabulate(rows, ['Name', 'New Version', 'Name', 'New Version'], tablefmt='rounded_outline')
    tooltip += "</tt>"

# css_class = "green"
# if updates > threshhold_yellow:
#     css_class = "yellow"
# if updates > threshhold_red:
#     css_class = "red"

data = json.dumps({
    "time": f"{int(time.time())}",
    "text": f"{updates} Updates ï€¡ ",
    "number": f"{updates}",
    "tooltip": f"{tooltip}"
})
print(data)
f = open("/tmp/updates.txt", "w")
f.write(data)
f.close()
